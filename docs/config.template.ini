#   Copyright (C) 2013 GC3, University of Zurich
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


# Elasticluster Configuration Template
# ====================================
#
# This configuration file is used to define the following properties to run elasticluster:
# - cloud (login data, url)
# - cluster (size, security, cloud provider, etc.)
#


# Cloud Section
# =============
#
# The cloud section defines all properties to connect to the cloud provider and specifies a 
# library to use to connect and manage instances.
#
# Naming:
# By giving different names for a cloud entry, different cloud providers (e.g. openstack, amazone, etc.)
# can be managed with the same configuration.
# [cloud/name]: replace 'name' with whatever matches the entry in your cluster section 
#
# Options:
# provider: implementation to use to connect to the cloud (ec2_boto)
# ec2_url: url to connect to the cloud (http://url:port/path)
# region: region to connect to
# ec2_access_key: access key
# ec2_secret_key: secret key
#

[cloud/hobbes]
provider=ec2_boto
ec2_url=
ec2_access_key=
ec2_secret_key=
region=nova



# Cluster Section
# ===============
#
# The cluster section defines all properties to start and manage a cluster.
#
#
# Naming:
# By giving different names for a cluster entry, multiple clusters can be managed through elasticluster.
# [cluster/name]: replace 'name' with whatever name you will recognize your cluster :) 
#
# Mandatory Options:
# cloud: defines the cloud name to run the instance on (see section above) 
# frontend: number of frontend nodes (only 1 supported yet!)
# compute: number of compute nodes
# 
# Overwritable Options:
# (The following options can be defined for the cluster and then overwritten in the compute/frontend section. 
#  Either way they have to be defined to properly run a cluster)
# image: name of the instance image
# flavor: flavor of the instance (e.g. m1.tiny, m1.medium, etc.)
# security-group: cloud security group name to assign the node to
# os_username: username to be able to connect to (set on the image)
# user_key: pki to enable login on the node
# key_name: name of the key on the cluster config

[cluster/%name%]
cloud=hobbes
frontend=
compute=
security_group=
image=
flavor=
os_username=
user_key=
key_name=


# Compute/Frontend Section
# ========================
#
# The compute/frontend section defines all instance properties for a compute or frontend node.
#
#
# Naming:
# The compute nodes of a cluster can have different instance properties than the frontend.
# [cluster/name/compute]: replace 'name' with the cluster the compute node settings belong to
# [cluster/name/frontend]:  replace 'name' with the cluster the compute node settings belong to
#
# Options to possibly overwrite:
# (The following options can overwrite the properties from the cluster section (if defined). Either way,
# they have to be defined in one section to properly function.)
# image: name of the instance image
# flavor: flavor of the instance (e.g. m1.tiny, m1.medium, etc.)
# security-group: cloud security group name to assign the node to
# os_username: username to be able to connect to (set on the image)
# user_key: pki to enable login on the node
# key_name: name of the key on the cluster config

[cluster/%name%/compute]
security_group=
image=
flavor=
os_username=
user_key=
key_name=

[cluster/%name%/frontend]
security_group=
image=
flavor=
os_username=
user_key=
key_name=

