# Elasticluster Configuration Template
# ====================================
#
# This is a template configuration file for elasticluster. 
#
# The file is parsed by ConfigParser module and has a syntax similar
# to Microsoft Windows INI files. 
#
# It consists of `sections` led by a `[sectiontype/name]` header and
# followed by lines in the form
#
# key=value
#
# Section names are in the form `[type/name]` wher `type` must be one of:
#
# - cloud   (define a cloud provider)
# - login   (define a way to access a virtual machine)
# - setup   (define a way to setup the cluster)
# - cluster (define the composition of a cluster. It contains
#            references to the other sections.)
#
# You must define at least one for each section types in order to have
# a valid configuration file.

# Cloud Section
# =============
#
# The cloud section defines all properties needed to connect to a
# specific cloud provider.
# 
# You can define as many cloud sections you want, assuming you have
# access to different cloud providers and want to deploy different
# clusters in different clouds. The mapping between cluster and cloud
# provider is done in the `cluster` section (see later).
#
# Valid configuration keys
# ------------------------
# 
# provider: the driver to use to connect to the cloud provider.
#           So far, the only accepted value is `boto`.
#
# ec2_url: the url of the EC2 endpoint. For Amazon is probably
#          something like:
#            https://ec2.us-east-1.amazonaws.com
#          (replace `us-east-1` with the zone you want to use)
#          while for OpenStack you can get it frmo the web interface
#          (see later
#
# ec2_access_key: the access key (also known as access id) your cloud
#                 provider gave you to access its cloud resources.
#
# ec2_secret_key: the secret key (also known as secret id) your cloud
#                 provider gave you to access its cloud resources.
# 
# ec2_region: the availability zone you want to use.
#
# **OpenStack users**: from the web interface you can download a file
# containing your EC2 credentials by logging in in your provider web
# interface and clicking on:
# 
# "settings" 
#   => "EC2 Credentials" 
#     => "Download EC2 Credentials")
#
# The `ec2rc.sh` file will contain some values. Update the
# configuration file:
# 
# `ec2_url` using the value of the variable EC2_URL
# `ec2_access_key` using the value of the variable EC2_ACCESS_KEY
# `ec2_secret_key` using the value of the variable EC2_SECRET_KEY
#
# For instance, to connect to Hobbes <http://hobbes.gc3.uzh.ch> you
# can use the following:

[cloud/hobbes]
provider=ec2_boto
ec2_url=http://hobbes.gc3.uzh.ch:8773/services/Cloud
ec2_access_key=****REPLACE WITH YOUR ACCESS ID****
ec2_secret_key=****REPLACE WITH YOUR SECRET KEY****
ec2_region=nova

# For Amazon instead (region us-east-1) you can use:
#
[cloud/amazon-us-east-1]
provider=ec2_boto
ec2_url=https://ec2.us-east-1.amazonaws.com
ec2_access_key=****REPLACE WITH YOUR ACCESS ID**** 
ec2_secret_key=****REPLACE WITH YOUR SECRET KEY****
ec2_region=us-east-1

# Login Section
# ===============
#
# This section contains information on how to access the instances
# started on the cloud, including the user and the SSH keys to use.
# 
# Some of the values depend on the image you specified in the
# `cluster` section. Values defined here also can affect the `setup`
# section and the way the system is setup.
#
# Mandatory configuration keys
# ----------------------------
#
# image_user: the remote user you must use to connect to the virtual
#             machine
# 
# image_sudo: Can be `True` or `False`. `True` means that on the
#             remote machine you can execute commands as root by
#             running the `sudo` program.
#
# image_user_sudo: the login name of the administrator. Use `root`
#                  unless you know what you are doing...
#
# user_key_name: name of the *keypair* to use on the cloud
#                provider. If the keypair does not exist it will be
#                created by elasticluster.
#
# user_key_private: file containing a valid RSA or DSA private key to
#                   be used to connect to the remote machine. Please
#                   note that this must match the `user_key_public`
#                   file (RSA and DSA keys go in pairs). Also note
#                   that Amazon does not accept DSA keys but only RSA
#                   ones.
#
# user_key_public: file containing the RSA/DSA public key
#                  corresponding to the `user_key_private` private
#                  key. See `user_key_private` for more details.
#
# For a typical ubuntu machine, both on Amazon and most OpenStack
# providers, these values should be fine:

[login/ubuntu]
image_user=ubuntu
image_user_sudo=root
image_sudo=True
user_key_name=elasticluster
user_key_private=~/.ssh/id_rsa
user_key_public=~/.ssh/id_rsa.pub

# while for Hobbes appliances you will need to use the following:
#
[login/gc3-user]
image_user=gc3-user
image_user_sudo=root
image_sudo=True
user_key_name=elasticluster
user_key_private=~/.ssh/id_dsa.cloud
user_key_public=~/.ssh/id_dsa.cloud.pub


# Setup Section
# =============
#
# This section contain information on *how to setup* a cluster. After
# the cluster is started, elasticluster will run a `setup provider` in
# order to configure it.
#
# Mandatory configuration keys
# ----------------------------
#
# provider: the type of setup provider. So far, only `ansible` is
#           supported.
#
# Ansible-specific mandatory configuration keys
# ----------------------------------------------
#
# The following configuration keys are only valid if `provider` is
# `ansible`. They also are all *mandatory*.
#
# playbook_path: Path to the playbook to use when configuring the
#                system. The default value printed here points to the
#                playbook distributed with elasticluster.
#
# frontend_groups: Comma separated list of ansible groups the frontend
#                  will belong to. The ansible provider will execute
#                  all the playbooks defined for these groups. The
#                  list of values depend on the playbooks used
#                  (cfr. `playbook_path`), but elasticluster comes
#                  with a set of playbooks and these are the valid
#                  groups:
#
#                  - slurm_master: configure this machine as slurm masternode
#
#                  - gridengine_master: configure as gridengine masternode
#
#                  - pbs_master,maui_master: configure as torque
#                    server and maui scheduler (please use both groups
#                    together)
#
#                  - ganglia_master,ganglia_monitor: configure as
#                    ganglia web frontend and ganglia monitor (please
#                    use both groups together)
#
#                  You can combine more groups together, but of course
#                  not all combinations make sense. A common setup is,
#                  for instance: slurm_master,ganglia_master,ganglia_monitor
#
# compute_groups: Comma separated list of ansible groups the compute
#                 nodes will belong to, similar to
#                 `frontend_groups`. Valid groups if using default
#                 elasticluster playbooks are:
#
#                 - slurm_clients
#                 - gridengine_clients
#                 - pbs_clients
#                 - ganglia_monitor
#
# Some (working) examples:

[setup/ansible-slurm]
provider=ansible
playbook_path=%(ansible_pb_dir)s/site.yml
frontend_groups=slurm_master
compute_groups=slurm_clients

[setup/ansible-gridengine]
provider=ansible
playbook_path=%(ansible_pb_dir)s/site.yml
frontend_groups=gridengine_master
compute_groups=gridengine_clients

[setup/ansible-pbs]
provider=ansible
playbook_path=%(ansible_pb_dir)s/site.yml
frontend_groups=pbs_master,maui_master
compute_groups=pbs_clients

# Cluster Section
# ===============
#
# The cluster section defines a `template` for a cluster. This section
# has references to each one of the other sections and define the
# image to use, the default number of compute nodes and the security
# group.
#
# Mandatory configuration keys
# -----------------------------
#
# cloud: the name of a valid `cloud` section. For instance `hobbes` or
#        `amazon-us-east-1`
#
# login: the name of a valid `login` section. For instance `ubuntu` or
#        `gc3-user`
#
# setup_provider: the name of a valid `setup` section. For instance,
#                 `ansible-slurm` or `ansible-pbs`
#
# frontend: An integer representing the number of frontend nodes to
#           use. The only supported value so far is `1`.
#
# compute: An integer representing the number of compute nodes. This
#          can be overridden at runtime using the `--compute-nodes`
#          command line option.
#
# image_id: image id in `ami` format. If you are using OpenStack, you
#           need to run `euca-describe-images` to get a valid `ami-*`
#           id.
#
# flavor: the image type to use. Different cloud providers call it
#         differently, could be `instance type`, `instance size` or
#         `flavor`.
#
# security_group: Security group to use when starting the instance.
#
# Optional configuration keys
# ---------------------------
# 
# image_userdata: shell script to be executed (as root) when the
#                 machine starts. This is usually not needed because
#                 the `ansible` provider works on *vanilla* images,
#                 but if you are using other setup providers you may
#                 need to execute some command to bootstrap it.
#
# Some (working) examples:

[cluster/slurm]
cloud=hobbes
login=gc3-user
setup_provider=ansible-slurm
security_group=default
# Ubuntu image
image_id=ami-00000048
flavor=m1.small
frontend=1
compute=2

[cluster/torque]
cloud=hobbes
frontend=1
compute=2
security_group=default
# CentOS image
image_id=ami-0000004f
flavor=m1.small
login=gc3-user
setup_provider=ansible-pbs

[cluster/aws-slurm]
cloud=amazon-us-east-1
login=ubuntu
setup_provider=ansible-slurm
security_group=default
# ubuntu image
image_id=ami-90a21cf9
flavor=m1.small
frontend=1
compute=2
